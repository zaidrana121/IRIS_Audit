using AutoMapper;
using ASTSM.Model.DbModels;
using ASTSM.Model.Dtos;
using ASTSM.Model.Dtos.Users;
using ASTSM.Model.Dtos.Grades;
using ASTSM.Model.Dtos.Fees;
using ASTSM.Model.Dtos.Students;
using ASTSM.Model.Dtos.Projects;

namespace ASTSM.Utlis.AutoMapper
{
    public class MappingProfile : Profile
    {
        public MappingProfile()
        {
            // User Mapping // add Reverse map  function for get reverse reactions
            CreateMap<User, UserDto>().ReverseMap();

            // Role Mapping 
            CreateMap<Role, RoleDto>();
            CreateMap<RoleDto, Role>();
            CreateMap<AstsProjects, ProjectsDto>().ReverseMap() ;
            CreateMap<Role, ShortListDto>()
            .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.Id))
            .ForMember(dest => dest.Title, opt => opt.MapFrom(src => src.Name));


            // FeeDetail Mapping
            CreateMap<StudentDiscountDetail, StudentDiscountDetailDto>().ReverseMap(); ;
            
            // FeeDetail Mapping
            CreateMap<FeeDetail, FeeDetailDto>()
            .ForMember(dest => dest.FeeId, opt => opt.Ignore()).ReverseMap(); // Assuming RoleId is the creator

            // Privilege Mapping
            CreateMap<Privilege, PrivilegeDto>();
            CreateMap<PrivilegeDto, Privilege>();

            // RolePrivilege Mapping
            CreateMap<RolePrivilege, RolePrivilegeDto>();
            CreateMap<RolePrivilegeDto, RolePrivilege>();
            CreateMap<RolePrivilegeRequestDto, RolePrivilege>()
            .ForMember(dest => dest.Id, opt => opt.Ignore()) // Id will be generated by the database
            .ForMember(dest => dest.CreatedBy, opt => opt.Ignore()) // Assuming RoleId is the creator
            .ForMember(dest => dest.CreatedOn, opt => opt.MapFrom(src => DateTime.Now)) // Assuming it's created now
            .ForMember(dest => dest.UpdatedBy, opt => opt.Ignore()) // Assuming not updated yet
            .ForMember(dest => dest.UpdatedOn, opt => opt.Ignore()); // Assuming not updated yet


            // DiscountFee Mapping
            CreateMap<Discount, DiscountDto>();
            CreateMap<DiscountDto, Discount>();

            // DiscountType Mapping
            CreateMap<DiscountType, DiscountTypeDto>();
            CreateMap<DiscountTypeDto, DiscountType>();
            CreateMap<DiscountType, ShortListDto>()
            .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.Id))
            .ForMember(dest => dest.Title, opt => opt.MapFrom(src => src.Title));

            // Employee Mapping
            CreateMap<Employee, EmployeeDto>();
            CreateMap<EmployeeDto, Employee>();
            CreateMap<Employee, ShortListDto>()
            .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.Id))
            .ForMember(dest => dest.Title, opt => opt.MapFrom(src => src.Name));

            // Fee Mapping
            CreateMap<Fee, FeeDto>();
            CreateMap<FeeDto, Fee>().ForMember(dest => dest.FeeDetails, opt => opt.Ignore())
            .ForMember(dest => dest.Grades, opt => opt.Ignore());

            // FeeType Mapping
            CreateMap<FeeType, FeeTypeDto>();
            CreateMap<FeeTypeDto, FeeType>();
            CreateMap<FeeType, ShortListDto>()
            .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.Id))
            .ForMember(dest => dest.Title, opt => opt.MapFrom(src => src.Title));

            // Grade Mapping
            CreateMap<Grade, GradeDto>();
            CreateMap<GradeDto, Grade>();
            CreateMap<Grade, GradeRequestDto>();
            CreateMap<GradeRequestDto, Grade>().ForMember(dest => dest.Fee, opt => opt.Ignore());
            CreateMap<Grade, ShortListDto>()
            .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.Id))
            .ForMember(dest => dest.Title, opt => opt.MapFrom(src => src.Title));

            // Student Mapping
            CreateMap<Student, StudentDto>();
            CreateMap<StudentDto, Student>();

            // StudentGrade Mapping
            CreateMap<StudentGrade, StudentGradeDto>();
            CreateMap<StudentGradeDto, StudentGrade>();
        }
    }
}
